<JZML>
<PROJECT version="5400" width="1024" height="724" osc_target="-2" midi_target="-2" kbmouse_target="-2" skin="Flat"/>
<WINDOW class="JAZZINTERFACE" text="Default" x="0" y="0" width="1024" height="724" state="1" group="0" font="tahoma,11,0" >
<WINDOW class="Container" text="MKConsole" x="0" y="0" width="698" height="294" id="32" state="1" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="1052688" label="1" tabbar="1" meta="0">
<WINDOW class="Container" text="_" x="-8" y="-8" width="698" height="294" id="22" state="1" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="8388608" label="1" tabbar="1" meta="0">
<WINDOW class="Container" text="UI" x="-8" y="-8" width="698" height="294" id="1" state="1" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="8421376" label="1" tabbar="1" meta="0">
<WINDOW class="Canvas" text="Screen" x="0" y="0" width="658" height="254" id="4" state="5" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" capture="1" redrawMode="1" touchSupport="1">
<VARIABLE name="touchReferencePoint={0, 0}" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/Screen/touchReferencePoint" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="9727,255,-1" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="isScrollingHorizontally=0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/Screen/isScrollingHorizontally" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="25955,10611,8226" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="horizontalScrollReferencePoint=" value="0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/Screen/horizontalScrollReferencePoint" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,-28116,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="lastTapTime=-1" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/Screen/lastTapTime" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<SCRIPT name="bounds()" script="return replace(getobjectrect(getobject()), {0, 0}, 0);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/Screen/bounds" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="onRedraw()" script="decl this = getobject();

canvas_clear(this);

decl bounds = bounds();
decl numRows = LayoutCalculator.numRows();
decl rowHeight = LayoutCalculator.rowHeight();
decl padding = LayoutCalculator.adjustedPadding();
decl rowSpacing = rowSpacing();
decl maxLineWidth = maxLineWidth();
decl fontSize = fontSize();
decl textColor = textColor();
decl backgroundColor = backgroundColor();


canvas_setFontSize(this, fontSize);
canvas_setTextBaseline(this, textBaselineMiddle);


decl ty = 0, i;
for (i = 0; i < numRows; i++) {
	canvas_setFillStyle(this, backgroundColor);
	canvas_fillRect(this, 0, ty, bounds[2], rowHeight);
	canvas_setFillStyle(this, textColor);
	decl lineIndex = scrolledLine + i;
	if (lineIndex <= numberOfLinesPrinted()) {
		canvas_fillText(this, textForLine(lineIndex), max(padding, 8) + horizontalScroll, ty + (rowHeight/2), maxLineWidth());
	}
	ty += rowHeight + rowSpacing;
}
" trigger_script="" trigger_type="255" trigger_name="onRedraw" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/Screen/onRedraw" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="onCursorDown(cursor,hit,x,y)" script="// Clear on double tap
decl isFastDoubleTap = abs((time * 1000) - (lastTapTime * 1000)) < 200;
decl isSimilarX = abs(x - touchReferencePoint[0]) < 10;
decl isSimilarY = abs(y - touchReferencePoint[1]) < 10;
if (isFastDoubleTap && isSimilarX && isSimilarY) {
	clear();
} 

lastTapTime = time;
touchReferencePoint = {x, y};
horizontalScrollReferencePoint = horizontalScroll;

" trigger_script="" trigger_type="255" trigger_name="onCursorDown" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/Screen/onCursorDown" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="onCursorMove(cursor,hit,x,y)" script="decl distanceTravelled = {
	x - touchReferencePoint[0],
	y - touchReferencePoint[1]
};

// Determine scroll direction

decl minimumTravelDistanceToRecognizeVerticalScroll = 8;
decl minimumTravelDistanceToRecognizeHorizontalScroll = 60;

if (!isScrollingHorizontally) {
	if (abs(distanceTravelled[0]) > minimumTravelDistanceToRecognizeHorizontalScroll) {
		isScrollingHorizontally = 1;
		touchReferencePoint = {x, y};
		return;
	} else {
		isScrollingHorizontally = 0;
	}
}

if (isScrollingHorizontally) {

	// Scroll horizontally

	scrollHorizontally((distanceTravelled[0] - (horizontalScrollReferencePoint)));
	touchReferencePoint = {x, y};
	horizontalScrollReferencePoint = horizontalScroll;

} else {
	
	// Scroll vertically

	decl linesScrolledVertically = 0;
	if (distanceTravelled[1] > minimumTravelDistanceToRecognizeVerticalScroll) {
		linesScrolledVertically = -1;
	} else if (distanceTravelled[1] < -minimumTravelDistanceToRecognizeVerticalScroll) {
		linesScrolledVertically = 1;
	}
	if (linesScrolledVertically != 0) {
		scrollToLine(scrolledLine + linesScrolledVertically);
		touchReferencePoint = {x, y};
	}	
}

" trigger_script="" trigger_type="255" trigger_name="onCursorMove" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/Screen/onCursorMove" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="onCursorUp(cursor,hit,x,y)" script="touchReferencePoint = {x, y};
isScrollingHorizontally = 0;" trigger_script="" trigger_type="255" trigger_name="onCursorUp" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/Screen/onCursorUp" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
</WINDOW>
<WINDOW class="Canvas" text="VerticalScrollBar" x="660" y="0" width="22" height="254" id="12" state="5" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" capture="1" redrawMode="1" touchSupport="1">
<SCRIPT name="onRedraw()" script="decl this = getobject();

canvas_clear(this);

decl bounds = bounds();
decl scrollIndicatorHeight = scrollIndicatorHeight();
decl horizontalPadding = 2;

// Draw Background
canvas_setFillStyle(this, scrollBarBackgroundColor());
canvas_fillRect(this, 0, 0, bounds[2], bounds[3]);

if (numberOfLinesPrinted() == 0) {
    return;
}

// Draw Scroll Indicator
canvas_setFillStyle(this, scrollIndicatorColor());
canvas_fillRect(this, 
    horizontalPadding,
    (bounds[3] - scrollIndicatorHeight) * (scrolledLine / maxScrollableLine()), 
    bounds[2] - (2 * horizontalPadding), 
    scrollIndicatorHeight
);

// Add Hit Regions
canvas_addHitRegion(this, 0, 1);
" trigger_script="" trigger_type="255" trigger_name="onRedraw" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/VerticalScrollBar/onRedraw" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="bounds()" script="return replace(getobjectrect(getobject()), {0, 0}, 0);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/VerticalScrollBar/bounds" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="onCursorMove(cursor,hit,x,y)" script="if (numberOfLinesPrinted() == 0) {
	return;
}

decl bounds = bounds();
decl scrollIndicatorHeight = scrollIndicatorHeight();
decl touchOffset = scrollIndicatorHeight / 2;
decl touchLocationPercent = min(max((y - touchOffset) / (bounds[3] - scrollIndicatorHeight), 0), 1);

// Calculate the new line based on the touch position
decl newLine = floor(touchLocationPercent * maxScrollableLine());
scrollToLine(newLine);
" trigger_script="" trigger_type="255" trigger_name="onCursorMove" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/VerticalScrollBar/onCursorMove" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="scrollIndicatorHeight()" script="decl visiblePercentOfTotal;
if (numberOfLinesPrinted() == 0) {
	visiblePercentOfTotal = 1;
} else {
 	visiblePercentOfTotal = LayoutCalculator.numRows() / (numberOfLinesPrinted() - 1);
}
return max(visiblePercentOfTotal * bounds()[3], 32);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/VerticalScrollBar/scrollIndicatorHeight" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
<WINDOW class="Canvas" text="HorizontalScrollBar" x="0" y="256" width="658" height="22" id="13" state="5" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" capture="1" redrawMode="1" touchSupport="1">
<SCRIPT name="onRedraw()" script="decl this = getobject();

canvas_clear(this);

decl bounds = bounds();

// Draw Background
canvas_setFillStyle(this, scrollBarBackgroundColor());
canvas_fillRect(this, 0, 0, bounds[2], bounds[3]);

if (numberOfLinesPrinted() == 0) {
	return;
}

// Draw Scroll Indicator
canvas_setFillStyle(this, scrollIndicatorColor());
decl scrollIndicatorWidth = scrollIndicatorWidth();
canvas_fillRect(this, 
	-1 * (horizontalScroll/maxLineWidth()) * (bounds[2] - scrollIndicatorWidth), 
	2,
	scrollIndicatorWidth, 
	bounds[3] - 4
);

// Add Hit Regions
canvas_addHitRegion(this, 0, 1);" trigger_script="" trigger_type="255" trigger_name="onRedraw" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/HorizontalScrollBar/onRedraw" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="bounds()" script="return replace(getobjectrect(getobject()), {0, 0}, 0);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/HorizontalScrollBar/bounds" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="onCursorMove(cursor,hit,x,y)" script="decl bounds = bounds();
decl scrollIndicatorWidth = scrollIndicatorWidth();
decl xOffset = x - (scrollIndicatorWidth / 2);
decl adjustedWidth = bounds[2] - scrollIndicatorWidth();
scrollHorizontally((xOffset/adjustedWidth) *  maxLineWidth());

" trigger_script="" trigger_type="255" trigger_name="onCursorMove" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/HorizontalScrollBar/onCursorMove" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="scrollIndicatorWidth()" script="if (maxLineWidth() == 0) {
	return 0;
}
return  (bounds()[2] / maxLineWidth()) * bounds()[2];" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/HorizontalScrollBar/scrollIndicatorWidth" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
<WINDOW class="Canvas" text="ScrollBarCorner" x="660" y="256" width="22" height="22" id="15" state="5" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" capture="1" redrawMode="1" touchSupport="1">
<SCRIPT name="onRedraw()" script="decl this = getobject();
decl bounds = replace(getobjectrect(this), {0, 0}, 0);
canvas_setFillStyle(this, scrollBarBackgroundColor());
canvas_fillRect(this, 0, 0, bounds[2], bounds[3]);
" trigger_script="" trigger_type="255" trigger_name="onRedraw" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/ScrollBarCorner/onRedraw" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
</WINDOW>
<WINDOW class="Container" text="LayoutCalculator" x="1024" y="1024" width="32" height="32" id="16" state="0" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="1596013" label="1" tabbar="1" meta="0">
<WINDOW class="Container" text="_private" x="0" y="0" width="111" height="65" id="12" state="0" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="1596013" label="1" tabbar="1" meta="0">
<VARIABLE name="_lastBounds=" value="0,0,658,254" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/_lastBounds" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="_rowHeight=" value="26.444445" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/_rowHeight" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="_numRows=" value="9" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/_numRows" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="_adjustedPadding=" value="4.222222" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/_adjustedPadding" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<SCRIPT name="recalculateLayoutIfNeeded()" script="decl bounds = replace(getobjectrect(Screen), {0, 0}, 0);

if (_lastBounds[0] == bounds[0] &&  
	_lastBounds[1] == bounds[1] &&
	_lastBounds[2] == bounds[2] &&
	_lastBounds[3] == bounds[3]) {
	return;
}

_lastBounds = bounds;

decl fontSize = fontSize();
decl rowSpacing = rowSpacing();
decl maxPadding = padding();

decl fontHeight = approxFontHeight(fontSize);
decl availableHeight = bounds[3];

// Calculate the initial number of rows and the effective row height
decl numRows = floor((availableHeight + rowSpacing) / (fontHeight + rowSpacing + 2 * maxPadding));
decl effectiveRowHeight = (availableHeight + rowSpacing) / numRows - rowSpacing;
decl adjustedPadding = (effectiveRowHeight - fontHeight) / 2;

// Adjust the number of rows and padding until it fits perfectly
while (adjustedPadding < 0 && numRows > 1) {
	numRows -= 1;
	effectiveRowHeight = (availableHeight + rowSpacing) / numRows - rowSpacing;
    adjustedPadding = (effectiveRowHeight - fontHeight) / 2;
}

_numRows = numRows;
_adjustedPadding = adjustedPadding;
_rowHeight = effectiveRowHeight;

" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/recalculateLayoutIfNeeded" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="approxFontHeight(fontSize)" script="decl fontSizes = {8, 10, 14, 15, 16, 18, 20, 25};
decl lineHeights = {14, 14, 22, 22, 22, 24, 26, 32};
decl count = sizeof(fontSizes);

if (fontSize <= fontSizes[0]) {
	return lineHeights[0];
}

if (fontSize >= fontSizes[count - 1]) {
	return lineHeights[count - 1];
}

decl i;
for (i = 0; i < count - 1; i++) {
	if (fontSize >= fontSizes[i] && fontSize <= fontSizes[i + 1]) {
		decl x0 = fontSizes[i];
		decl y0 = lineHeights[i];
		decl x1 = fontSizes[i + 1];
		decl y1 = lineHeights[i + 1];
		return y0 + ((fontSize - x0) * (y1 - y0) / (x1 - x0));
	}
}" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/approxFontHeight" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="onLoad()" script="_lastBounds = {-1, -1, -1, -1};
recalculateLayoutIfNeeded();

show(getobject(), 0);" trigger_script="" trigger_type="5" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/LayoutCalculator/_private/onLoad" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
</WINDOW>
<SCRIPT name="rowHeight()" script="_private.recalculateLayoutIfNeeded();
return _private._rowHeight;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/LayoutCalculator/rowHeight" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="numRows()" script="_private.recalculateLayoutIfNeeded();
return _private._numRows;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/LayoutCalculator/numRows" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="adjustedPadding()" script="_private.recalculateLayoutIfNeeded();
return _private._adjustedPadding;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/LayoutCalculator/adjustedPadding" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
<VARIABLE name="scrolledLine=0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/scrolledLine" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="713,1,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="horizontalScroll=0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/horizontalScroll" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="didScrollToLastLine=0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/UI/didScrollToLastLine" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<SCRIPT name="scrollToLine(line)" script="decl newLine = line;
decl minLine = 0;
decl numRows = LayoutCalculator.numRows();
decl numberOfLinesPrinted = numberOfLinesPrinted();
decl maxLine = max(numberOfLinesPrinted - numRows, minLine);

scrolledLine = min(max(line, minLine), maxLine);

if (scrolledLine >= max(numberOfLinesPrinted - numRows - 1, 0)) {
	didScrollToLastLine = 1;
} else {
    didScrollToLastLine = 0;
}

refresh();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/scrollToLine" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="scrollHorizontally(x)" script="horizontalScroll = -1 * min(max(x, 0), maxLineWidth());
refresh();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/scrollHorizontally" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="refresh()" script="canvas_refresh(Screen);
canvas_refresh(VerticalScrollBar);
canvas_refresh(HorizontalScrollBar);
canvas_refresh(ScrollBarCorner);
" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/refresh" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="init()" script="decl this = getobject();
decl bounds = replace(getobjectrect(getparent(_)), {0, 0}, 0) - {0, 0, 16, 16};
decl spacing = 2;

decl scrollBarSize = scrollBarSize();

setobjectrect(UI.Screen, {
	bounds[0], 
	bounds[1], 
	bounds[2] - scrollBarSize - spacing,
	bounds[3] - scrollBarSize - spacing
});

setobjectrect(UI.VerticalScrollBar, {
	bounds[2] - scrollBarSize, 
	bounds[1],
	scrollBarSize,
	bounds[3] - scrollBarSize - spacing
});

setobjectrect(UI.HorizontalScrollBar, {
	bounds[0],
	bounds[3] - scrollBarSize,
	bounds[2] - scrollBarSize - spacing,
	scrollBarSize
});


setobjectrect(UI.ScrollBarCorner, {
	bounds[2] - scrollBarSize,
	bounds[3] - scrollBarSize,
	scrollBarSize,
	scrollBarSize
});


refresh();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/init" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="textForLine(line)" script="return Buffer.readLine(line);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/textForLine" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="bufferDidClear()" script="scrollToLine(0);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/bufferDidClear" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="bufferDidWriteLine(line)" script="
    // Refresh the UI to reflect the new line
    UI.refresh();

    // Scroll to the bottom if the user was at the bottom before the update
    if (didScrollToLastLine) {
        scrollToLine(maxScrollableLine());
    }
/*
decl atBottom = (scrolledLine >= maxScrollableLine());
if (atBottom) {
	scrollToLine(maxScrollableLine());
}
refresh();
*/" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/bufferDidWriteLine" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="maxScrollableLine()" script="return max(numberOfLinesPrinted() - LayoutCalculator.numRows(), 0);

" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/maxScrollableLine" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="numberOfLinesPrinted()" script="return Buffer.count();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/UI/numberOfLinesPrinted" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
<WINDOW class="Container" text="Buffer" x="0" y="0" width="32" height="32" id="15" state="0" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="1596013" label="1" tabbar="1" meta="0">
<WINDOW class="Container" text="_private" x="0" y="0" width="32" height="32" id="22" state="0" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="1596013" label="1" tabbar="1" meta="0">
<VARIABLE name="_1=" value="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/_1" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="_0=" value="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/_0" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="tail=" value="0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/tail" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="capacity=" value="1280" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/capacity" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<FUNCTION name="bufferWidth()=256" send="1"/>
<VARIABLE name="_2=" value="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/_2" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="_3=" value="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/_3" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
<VARIABLE name="_4=" value="0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0" send="0" osc_target="0" osc_trigger="1" osc_message="/MKConsole/_/Buffer/_private/_4" midi_target="-1" midi_trigger="1" midi_message="0x90,0x90,0,0" midi_scale="0,16383" kbmouse_target="-1" kbmouse_trigger="1" kbmouse_message="0,0,0" kbmouse_scale="0,1,0,1"/>
</WINDOW>
<SCRIPT name="clear()" script="_private.tail = 0;

decl sentinel = 'nil';
decl bufferCount = 0;

while (1) {
	decl bufferName = '_' + bufferCount;
	setexpression(_private, bufferName, sentinel);
	if (getexpression(_private, bufferName) != sentinel) {
		break;
	} else {
		setexpression(_private, bufferName, fill(1, 0, _private.bufferWidth()));
		bufferCount++;
	}
}

_private.capacity = _private.bufferWidth() * bufferCount;


UI.bufferDidClear();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Buffer/clear" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="writeLine(text)" script="if (_private.tail == _private.capacity) {
	clear();
}
decl oldTail = _private.tail;
decl bufferName = '_' + floor(_private.tail/_private.bufferWidth());
decl elementIndex = _private.tail % _private.bufferWidth();
decl buffer = getexpression(_private, bufferName);
buffer = set(buffer, '' + text, elementIndex);
setexpression(_private, bufferName, buffer);
UI.bufferDidWriteLine(_private.tail++);
" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Buffer/writeLine" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="readLine(index)" script="index = min(max(index, 0), _private.capacity - 1);
decl bufferName = '_' + floor(index / _private.bufferWidth());
decl elementIndex = index % _private.bufferWidth();
return getexpression(_private, bufferName)[elementIndex];" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Buffer/readLine" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="count()" script="_private.tail;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Buffer/count" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
<WINDOW class="Container" text="Helpers" x="1024" y="1024" width="32" height="32" id="16" state="0" group="0" font="tahoma,10,0" send="0" osc_target="-2" midi_target="-2" kbmouse_target="-2" color="1596013" label="1" tabbar="1" meta="0">
<SCRIPT name="objectToText(object)" script="decl result = 'Object: name= ';
result += getattribute(object, 'name') + ', ';
decl rect = getobjectrect(object);
if (sizeof(rect) > 1) {
	result += 'frame= ' + arrayToText(rect) + ', ';
}
result += 'path= ' + objectPathToText(object);
return result;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Helpers/objectToText" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="objectPathToText(object)" script="decl result = '/' + getattribute(object, 'name');
decl parent = getparent(object);
while (getparent(parent) != 0) {
	result = '/' + getattribute(parent, 'name') + result;
	parent = getparent(parent);
}

return result;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Helpers/objectPathToText" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="arrayToText(array)" script="decl result = '{';
decl size = sizeof(array);
decl i;
for (i = 0; i < size; i++) {
	result += '' + array[i];
	if (i < size - 1) {
		result += ', ';
	}
}
result += '}';
return result;" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Helpers/arrayToText" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="valueToText(value)" script="if (sizeof(value) > 1) {
	return arrayToText(value);
} else if (sizeof(getobjectrect(value)) > 1) {
	return objectToText(value);
} else {
	return '' + value;
}

decl isObject = sizeof(getobjectrect(value)) > 1;
if (isObject) {
	return objectToText(value);
} else if (sizeof(value) > 1) {
	
} else {
	return '' + value;
}
" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/Helpers/valueToText" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
<SCRIPT name="onLoad()" script="decl this = getobject();

decl bounds = replace(getobjectrect(getparent(this)), {0, 0}, 0) - {0, 0, 16, 16};

setobjectrect(this, {
	-8, 
	-8, 
	bounds[2] + 16, 
	bounds[3] + 16
});

setobjectrect(UI, getobjectrect(this));

UI.init();


" trigger_script="" trigger_type="5" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/onLoad" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
<SCRIPT name="print(value)" script="Buffer.writeLine(Helpers.valueToText(value));




" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/print" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="clear()" script="Buffer.clear();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/clear" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="onRect()" script="onLoad();" trigger_script="getobjectrect(getparent(_))" trigger_type="0" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/_/onRect" midi_message="0x90,0x90,0,0" midi_target="-1" flag="1"/>
</WINDOW>
<FUNCTION name="textColor()=1" send="1"/>
<FUNCTION name="scrollIndicatorColor()=0.2" send="1"/>
<FUNCTION name="scrollBarSize()=22" send="1"/>
<FUNCTION name="fontSize()=12" send="1"/>
<FUNCTION name="backgroundColor()=0.1" send="1"/>
<FUNCTION name="scrollBarBackgroundColor()=0.07" send="1"/>
<FUNCTION name="maxLineWidth()=3000" send="1"/>
<FUNCTION name="padding()=3" send="1"/>
<FUNCTION name="rowSpacing()=2" send="1"/>
<SCRIPT name="print(value)" script="_.print(value);" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/print" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
<SCRIPT name="clear()" script="_.clear();" trigger_script="" trigger_type="4" trigger="1" clock="0" clock_div="4" osc_message="/MKConsole/clear" midi_message="0x90,0x90,0,0" midi_target="-1" flag="0"/>
</WINDOW>
</WINDOW>
</JZML>
